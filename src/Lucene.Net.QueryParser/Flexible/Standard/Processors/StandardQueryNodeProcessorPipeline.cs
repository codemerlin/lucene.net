/*
 * This code is derived from MyJavaLibrary (http://somelinktomycoollibrary)
 * 
 * If this is an open source Java library, include the proper license and copyright attributions here!
 */

using Lucene.Net.Queryparser.Flexible.Core.Config;
using Lucene.Net.Queryparser.Flexible.Core.Processors;
using Lucene.Net.Queryparser.Flexible.Standard.Processors;
using Sharpen;

namespace Lucene.Net.Queryparser.Flexible.Standard.Processors
{
	/// <summary>
	/// This pipeline has all the processors needed to process a query node tree,
	/// generated by
	/// <see cref="Lucene.Net.Queryparser.Flexible.Standard.Parser.StandardSyntaxParser
	/// 	">Lucene.Net.Queryparser.Flexible.Standard.Parser.StandardSyntaxParser</see>
	/// , already assembled. <br/>
	/// <br/>
	/// The order they are assembled affects the results. <br/>
	/// <br/>
	/// This processor pipeline was designed to work with
	/// <see cref="Lucene.Net.Queryparser.Flexible.Standard.Config.StandardQueryConfigHandler
	/// 	">Lucene.Net.Queryparser.Flexible.Standard.Config.StandardQueryConfigHandler
	/// 	</see>
	/// . <br/>
	/// <br/>
	/// The result query node tree can be used to build a
	/// <see cref="Lucene.Net.Search.Query">Lucene.Net.Search.Query</see>
	/// object using
	/// <see cref="Lucene.Net.Queryparser.Flexible.Standard.Builders.StandardQueryTreeBuilder
	/// 	">Lucene.Net.Queryparser.Flexible.Standard.Builders.StandardQueryTreeBuilder
	/// 	</see>
	/// . <br/>
	/// </summary>
	/// <seealso cref="Lucene.Net.Queryparser.Flexible.Standard.Builders.StandardQueryTreeBuilder
	/// 	">Lucene.Net.Queryparser.Flexible.Standard.Builders.StandardQueryTreeBuilder
	/// 	</seealso>
	/// <seealso cref="Lucene.Net.Queryparser.Flexible.Standard.Config.StandardQueryConfigHandler
	/// 	">Lucene.Net.Queryparser.Flexible.Standard.Config.StandardQueryConfigHandler
	/// 	</seealso>
	/// <seealso cref="Lucene.Net.Queryparser.Flexible.Standard.Parser.StandardSyntaxParser
	/// 	">Lucene.Net.Queryparser.Flexible.Standard.Parser.StandardSyntaxParser</seealso>
	public class StandardQueryNodeProcessorPipeline : QueryNodeProcessorPipeline
	{
		public StandardQueryNodeProcessorPipeline(QueryConfigHandler queryConfig) : base(
			queryConfig)
		{
			AddItem(new WildcardQueryNodeProcessor());
			AddItem(new MultiFieldQueryNodeProcessor());
			AddItem(new FuzzyQueryNodeProcessor());
			AddItem(new MatchAllDocsQueryNodeProcessor());
			AddItem(new OpenRangeQueryNodeProcessor());
			AddItem(new NumericQueryNodeProcessor());
			AddItem(new NumericRangeQueryNodeProcessor());
			AddItem(new LowercaseExpandedTermsQueryNodeProcessor());
			AddItem(new TermRangeQueryNodeProcessor());
			AddItem(new AllowLeadingWildcardProcessor());
			AddItem(new AnalyzerQueryNodeProcessor());
			AddItem(new PhraseSlopQueryNodeProcessor());
			//add(new GroupQueryNodeProcessor());
			AddItem(new BooleanQuery2ModifierNodeProcessor());
			AddItem(new NoChildOptimizationQueryNodeProcessor());
			AddItem(new RemoveDeletedQueryNodesProcessor());
			AddItem(new RemoveEmptyNonLeafQueryNodeProcessor());
			AddItem(new BooleanSingleChildOptimizationQueryNodeProcessor());
			AddItem(new DefaultPhraseSlopQueryNodeProcessor());
			AddItem(new BoostQueryNodeProcessor());
			AddItem(new MultiTermRewriteMethodProcessor());
		}
	}
}
