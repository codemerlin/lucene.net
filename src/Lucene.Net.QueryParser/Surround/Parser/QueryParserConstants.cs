/*
 * This code is derived from MyJavaLibrary (http://somelinktomycoollibrary)
 * 
 * If this is an open source Java library, include the proper license and copyright attributions here!
 */

using Lucene.Net.Queryparser.Surround.Parser;
using Sharpen;

namespace Lucene.Net.Queryparser.Surround.Parser
{
	/// <summary>Token literal values and constants.</summary>
	/// <remarks>
	/// Token literal values and constants.
	/// Generated by org.javacc.parser.OtherFilesGen#start()
	/// </remarks>
	public abstract class QueryParserConstants
	{
		/// <summary>End of File.</summary>
		/// <remarks>End of File.</remarks>
		public const int EOF = 0;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _NUM_CHAR = 1;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _TERM_CHAR = 2;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _WHITESPACE = 3;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _STAR = 4;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _ONE_CHAR = 5;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _DISTOP_NUM = 6;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int OR = 8;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int AND = 9;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int NOT = 10;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int W = 11;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int N = 12;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int LPAREN = 13;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RPAREN = 14;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int COMMA = 15;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int COLON = 16;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int CARAT = 17;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int TRUNCQUOTED = 18;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int QUOTED = 19;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int SUFFIXTERM = 20;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int TRUNCTERM = 21;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int TERM = 22;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int NUMBER = 23;

		/// <summary>Lexical state.</summary>
		/// <remarks>Lexical state.</remarks>
		public const int Boost = 0;

		/// <summary>Lexical state.</summary>
		/// <remarks>Lexical state.</remarks>
		public const int DEFAULT = 1;

		/// <summary>Literal token values.</summary>
		/// <remarks>Literal token values.</remarks>
		public const string[] tokenImage = new string[] { "<EOF>", "<_NUM_CHAR>", "<_TERM_CHAR>"
			, "<_WHITESPACE>", "\"*\"", "\"?\"", "<_DISTOP_NUM>", "<token of kind 7>", "<OR>"
			, "<AND>", "<NOT>", "<W>", "<N>", "\"(\"", "\")\"", "\",\"", "\":\"", "\"^\"", "<TRUNCQUOTED>"
			, "<QUOTED>", "<SUFFIXTERM>", "<TRUNCTERM>", "<TERM>", "<NUMBER>" };
	}
}
