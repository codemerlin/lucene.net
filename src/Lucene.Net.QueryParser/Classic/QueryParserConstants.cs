/*
 * This code is derived from MyJavaLibrary (http://somelinktomycoollibrary)
 * 
 * If this is an open source Java library, include the proper license and copyright attributions here!
 */

using Lucene.Net.Queryparser.Classic;
using Sharpen;

namespace Lucene.Net.Queryparser.Classic
{
	/// <summary>Token literal values and constants.</summary>
	/// <remarks>
	/// Token literal values and constants.
	/// Generated by org.javacc.parser.OtherFilesGen#start()
	/// </remarks>
	public abstract class QueryParserConstants
	{
		/// <summary>End of File.</summary>
		/// <remarks>End of File.</remarks>
		public const int EOF = 0;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _NUM_CHAR = 1;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _ESCAPED_CHAR = 2;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _TERM_START_CHAR = 3;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _TERM_CHAR = 4;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _WHITESPACE = 5;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int _QUOTED_CHAR = 6;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int AND = 8;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int OR = 9;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int NOT = 10;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int PLUS = 11;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int MINUS = 12;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int BAREOPER = 13;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int LPAREN = 14;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RPAREN = 15;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int COLON = 16;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int STAR = 17;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int CARAT = 18;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int QUOTED = 19;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int TERM = 20;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int FUZZY_SLOP = 21;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int PREFIXTERM = 22;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int WILDTERM = 23;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int REGEXPTERM = 24;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGEIN_START = 25;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGEEX_START = 26;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int NUMBER = 27;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGE_TO = 28;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGEIN_END = 29;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGEEX_END = 30;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGE_QUOTED = 31;

		/// <summary>RegularExpression Id.</summary>
		/// <remarks>RegularExpression Id.</remarks>
		public const int RANGE_GOOP = 32;

		/// <summary>Lexical state.</summary>
		/// <remarks>Lexical state.</remarks>
		public const int Boost = 0;

		/// <summary>Lexical state.</summary>
		/// <remarks>Lexical state.</remarks>
		public const int Range = 1;

		/// <summary>Lexical state.</summary>
		/// <remarks>Lexical state.</remarks>
		public const int DEFAULT = 2;

		/// <summary>Literal token values.</summary>
		/// <remarks>Literal token values.</remarks>
		public const string[] tokenImage = new string[] { "<EOF>", "<_NUM_CHAR>", "<_ESCAPED_CHAR>"
			, "<_TERM_START_CHAR>", "<_TERM_CHAR>", "<_WHITESPACE>", "<_QUOTED_CHAR>", "<token of kind 7>"
			, "<AND>", "<OR>", "<NOT>", "\"+\"", "\"-\"", "<BAREOPER>", "\"(\"", "\")\"", "\":\""
			, "\"*\"", "\"^\"", "<QUOTED>", "<TERM>", "<FUZZY_SLOP>", "<PREFIXTERM>", "<WILDTERM>"
			, "<REGEXPTERM>", "\"[\"", "\"{\"", "<NUMBER>", "\"TO\"", "\"]\"", "\"}\"", "<RANGE_QUOTED>"
			, "<RANGE_GOOP>" };
	}
}
